git init : para iniciar el repositorio
git add : para agregar los cambios recientes al area de staging
git commit : para mandar los cambios en staging al repositorio
git status : muestra el estado de los archivos, pueden estar en untraked, staging o todo en master
git show : para ver los cambios en un commit, archivo, ver cambios entre commits
git diff : para ver la diferencia entre dos archivos, commit archivo
git log : para ver todo el historial de cambios, se puede agregar el parametro 
git log --oneline : Te muestra el id commit y el título del commit.
git log --decorate : Te muestra donde se encuentra el head point en el log.
git log --stat : Explica el número de líneas que se cambiaron brevemente.
git log -p : Explica el número de líneas que se cambiaron y te muestra que se cambió en el contenido.
git log --grep="actua" : Busca los commits que cumplan tal cual está escrito entre las comillas.
git log --grep="actua" -i : Busca los commits que cumplan sin importar mayúsculas o minúsculas.
git log --all --graph --oneline --decorate : muestra los mensajes de los commits en un formato bonito y comprimido
git log --pretty=format:"%cn hizo un commit %h el dia %cd" : muestra los mensajes de los commits
git log --author="Jorge Mendoza" : para mostrar los commits de un usuario
git log > log.txt : guardar los logs en un archivo txt
git shortlog : indica que commits ha realizado un usuario
git rm : --cached elimina el archivo especificado del staging, con -r lo elimina tmb del local
git restore : restaura un archivo a un estado anterior sin afectar el historial de commits
git reset : --soft regresa a un commit anterior sin quitar los cambios en staging o --hard regresa a un commit anterior borrando todo de staging.
             Regreso en el tiempo, si elimina los commits posteriores, por lo que es un punto sin regreso.
               al commit elegido. HEAD quita los archivos de staging.
git checkout : para traer los cambios de un archivo(s) desde un commit anterior y para moverse ente ramas,
               los parametros son el commit ID y el archivo. Regreso en el tiempo, no elimina los commits posteriores
               al commit elegido.
git clone url : se trae los archivos de master remoto al directorio de trabajo y una copia de los cambios historicos
                al repo local. Para esto no tenemos que iniciar con init, simplemente clonamos.
fok nos hace una copia en el remoto de un proyecto que querramos en donde no somos colaboradores.
git branch [name] : crea una nueva rama                
git branch -m [name] : renombra la rama actual
git branch -d [name] : borra la rama
git branch -r : muestra las ramas remotas
git branch -a : muestra todas las ramas 
git push origin --delete mi-rama : elimina la rama remota mi-rama
git push : se envia al repo remoto
git fetch : se trae una copia del remoto a mi repo local
git merge : hace una mezcla del repo local con mis archivos de trabajo
git merge --allow-unrelated-histories origin/main : para cuando el remote y el local no tienen cosas comunes
git pull origin main: es un git fetch y un git merge al mismo tiempo, se trae desde el remoto al local
git remote add origin [el link del remoto] : para conectar con un remoto
git remote set-url origin [el link del remoto] : permite setear un nuevo remoto
git remote :  nos muestra los remotes que tenemos conectados
git -v : nos muestra hacia donde podemos conectarnos hacia ambas direcciones
git config --global alias.verTodo "log --graph" : con esto lo que haces es crear un alias en git y asi solo lo llamas como git alias
git tag -a [nombre] -m "[mensaje]" [referencia ID commit]
git tag : list de todos los tags
git tag -d algoChafa : borra la tag localmente
git show-ref --tags : muestra la lista de los tags, con sus referencias de ID's
git push origin --tags : para mandar los tags al remoto
git push origin :refs/tags/algoChafa : envia la referencia de que ya el tag no existe, cuando ya se ha borrado localmente
git push origin --delete [rama] : para borrar una rama del remoto
gitk : muestra la historia de cambios de gforma grafica
git show-branch --all : muestra la historia de cambios
git rebase : sirve para pegar una rama en otra
git stash : para hacer como un screen shot y regresarme al ultimo commit
git stash list : muestre todos los tages 
git stash pop : regresa al stash
git stash branch [nombre] : para pasar a una rama el stash
git clean --dry-run : para ver los archivos que se quieren limpiar, porque no los necesitamos
git clean -f : borra los archivos que se listaron con el comando de arriba
git cherry-pick [ID_commit] : trae un commit viejo de otra rama a la rama actual
git reflow : te da una historia de absolutamente todo
git commit --amend : agrega un nuevo cambio a un commit anterior
git grep -n algo : sirve para buscar dentro de los archivos de codigo, con -c hace el conteo
git log -S "aglo" : sirve para buscar en el log de commits  
git shortlog -sn : muestra cuantos commits ha hecho cada persona 
git shortlog -sn --all --no-merges : lo anterior sin merges
git blame -c [archivo] -L 15,18: da info de los cambios en un archivo en determinadas lines

Generacion de llaves publica y privada
ssh-keygen -t rsa -b 4096 -C [email] : genera la llave
Get-Service ssh-agent : revisa si el servicio ssh esta corriedo
ssh-add [ruta de la llave id_rsa]
cat ~/.ssh/id_rsa.pub : para copiar la llave y se agrega en github para asi estar conectados.


NOTAS: 
- cuando no se dan parametros a:
git show : muestra los cambios en los ultimos dos commits, el actual (HEAD) y el anterior, al dar parametros como el commit id o el archivo se muestra el detalle de ese parametro
git log : muestra todo el historial de cambios, al dar parametros como el commit id o el archivo se muestra el detalle de ese parametro
git diff se puede usar con lo siguientes parametros:
    git diff --cached : muestra la diferencia entre el archivo local y el archivo en staging
    git diff --staged : muestra la diferencia entre el archivo en staging y el archivo en master
    git diff HEAD: muestra la diferencia entre el archivo local y el archivo en master